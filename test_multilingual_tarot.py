#!/usr/bin/env python3
"""
Test script for multilingual tarot reader
Tests that the system responds directly in the input language without translation
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from utils.language_detector import language_detector
from utils.intent import classify_intent
from core.tarot_reader import perform_reading, get_system_prompt
from utils.context import create_context

def test_language_detection():
    """Test language detection for various inputs"""
    print("ЁЯФН Testing Language Detection...")
    
    test_cases = [
        ("Hello, how are you?", "en"),
        ("рдирдорд╕реНрддреЗ, рдХреИрд╕реЗ рд╣реЛ рдЖрдк?", "hi"),
        ("Namaste, kaise ho aap?", "hi_rom"),
        ("рдирдорд╕реНрдХрд╛рд░, рддреБрдореНрд╣реА рдХрд╕реЗ рдЖрд╣рд╛рдд?", "mr"),
        ("Namaskar, tumhi kase aahat?", "mr_rom"),
        ("ржЖржкржирж┐ ржХрзЗржоржи ржЖржЫрзЗржи?", "bn"),
        ("р░ор▒Ар░░р▒Б р░Ор░▓р░╛ р░Йр░ир▒Нр░ир░╛р░░р▒Б?", "te"),
        ("роирпАроЩрпНроХро│рпН роОрокрпНрокроЯро┐ роЗро░рпБроХрпНроХро┐ро▒рпАро░рпНроХро│рпН?", "ta"),
        ("ркдркорлЗ ркХрлЗрко ркЫрлЛ?", "gu")
    ]
    
    for text, expected in test_cases:
        detected, confidence = language_detector(text)
        status = "тЬЕ" if detected == expected else "тЭМ"
        print(f"{status} '{text[:20]}...' -> {detected} (expected: {expected}, confidence: {confidence:.2f})")

def test_system_prompts():
    """Test that system prompts are generated correctly for each language"""
    print("\nЁЯУЭ Testing System Prompts...")
    
    languages = ['en', 'hi', 'hi_rom', 'mr', 'mr_rom', 'bn', 'te', 'ta', 'gu']
    
    for lang in languages:
        prompt = get_system_prompt(lang)
        # Check if prompt contains language-specific instructions
        if lang == 'en':
            assert "Respond in English" in prompt, f"English prompt missing language instruction"
        elif lang == 'hi':
            assert "рд╣рд┐рдВрджреА рдореЗрдВ рдЬрд╡рд╛рдм рджреЗрдВ" in prompt, f"Hindi prompt missing language instruction"
        elif lang == 'hi_rom':
            assert "Hindi Roman script mein jawab dein" in prompt, f"Hindi Roman prompt missing language instruction"
        elif lang == 'mr':
            assert "рдорд░рд╛рдареАрдд рдЙрддреНрддрд░ рджреНрдпрд╛" in prompt, f"Marathi prompt missing language instruction"
        elif lang == 'mr_rom':
            assert "Marathi Roman script madhe uttar dya" in prompt, f"Marathi Roman prompt missing language instruction"
        elif lang == 'bn':
            assert "ржмрж╛ржВрж▓рж╛ржпрж╝ ржЙрждрзНрждрж░ ржжрж┐ржи" in prompt, f"Bengali prompt missing language instruction"
        elif lang == 'te':
            assert "р░др▒Жр░▓р▒Бр░Чр▒Бр░▓р▒Л р░╕р░ор░╛р░зр░╛р░ир░В р░Зр░╡р▒Нр░╡р░Вр░бр░┐" in prompt, f"Telugu prompt missing language instruction"
        elif lang == 'ta':
            assert "родрооро┐ро┤ро┐ро▓рпН рокродро┐ро▓рпН роХрпКроЯрпБроЩрпНроХро│рпН" in prompt, f"Tamil prompt missing language instruction"
        elif lang == 'gu':
            assert "ркЧрлБркЬрк░рк╛ркдрлАркорк╛ркВ ркЬрк╡рк╛ркм ркЖрккрлЛ" in prompt, f"Gujarati prompt missing language instruction"
        
        print(f"тЬЕ {lang}: System prompt generated successfully")

def test_multilingual_responses():
    """Test that tarot reader responds in the correct language"""
    print("\nЁЯФо Testing Multilingual Tarot Responses...")
    
    test_questions = [
        ("What does my future hold?", "en"),
        ("рдореЗрд░рд╛ рднрд╡рд┐рд╖реНрдп рдХреНрдпрд╛ рд╣реИ?", "hi"),
        ("Mera bhavishya kya hai?", "hi_rom"),
        ("рдорд╛рдЭреЗ рднрд╡рд┐рд╖реНрдп рдХрд╛рдп рдЖрд╣реЗ?", "mr"),
        ("Mazhe bhavishya kay aahe?", "mr_rom"),
        ("ржЖржорж╛рж░ ржнржмрж┐рж╖рзНржпржд ржХрж┐?", "bn"),
        ("р░ир░╛ р░нр░╡р░┐р░╖р▒Нр░пр░др▒Нр░др▒Б р░Пр░ор░┐р░Яр░┐?", "te"),
        ("роОройрпН роОродро┐ро░рпНроХро╛ро▓роорпН роОройрпНрой?", "ta"),
        ("ркорк╛рк░рлБркВ ркнрк╡рк┐рк╖рлНркп рк╢рлБркВ ркЫрлЗ?", "gu")
    ]
    
    for question, expected_lang in test_questions:
        print(f"\n--- Testing: {question} (Expected: {expected_lang}) ---")
        
        # Detect language
        detected_lang, confidence = language_detector(question)
        print(f"Detected: {detected_lang} (confidence: {confidence:.2f})")
        
        # Classify intent
        intent = classify_intent(question)
        print(f"Intent: {intent}")
        
        # Create context
        context = create_context(language=detected_lang)
        
        # Perform reading
        result = perform_reading(question, intent, context.get_history(), detected_lang)
        
        if "error" in result:
            print(f"тЭМ Error: {result['error']}")
            continue
        
        # Check response
        interpretation = result.get("interpretation", "")
        print(f"Response: {interpretation[:100]}...")
        
        # Verify response is in the correct language
        if expected_lang == 'en':
            # Check for English words
            english_indicators = ['the', 'and', 'you', 'your', 'will', 'can', 'should']
            has_english = any(word in interpretation.lower() for word in english_indicators)
            print(f"тЬЕ English response: {has_english}")
        elif expected_lang == 'hi':
            # Check for Hindi words
            hindi_indicators = ['рдЖрдк', 'рдЖрдкрдХрд╛', 'рд╣реИ', 'рд╣реИрдВ', 'рдХрд░реЗрдВ', 'рджреЗрдВ', 'рд╕рдХрддреЗ']
            has_hindi = any(word in interpretation for word in hindi_indicators)
            print(f"тЬЕ Hindi response: {has_hindi}")
        elif expected_lang == 'hi_rom':
            # Check for Hindi Roman script
            hindi_rom_indicators = ['aap', 'aapka', 'hai', 'hain', 'karein', 'dein', 'sakte']
            has_hindi_rom = any(word in interpretation.lower() for word in hindi_rom_indicators)
            print(f"тЬЕ Hindi Roman response: {has_hindi_rom}")
        elif expected_lang == 'mr':
            # Check for Marathi words
            marathi_indicators = ['рддреБрдореНрд╣реА', 'рддреБрдордЪреЗ', 'рдЖрд╣реЗ', 'рдЖрд╣рд╛рдд', 'рдХрд░рд╛', 'рджреНрдпрд╛', 'рд╢рдХрддрд╛']
            has_marathi = any(word in interpretation for word in marathi_indicators)
            print(f"тЬЕ Marathi response: {has_marathi}")
        elif expected_lang == 'mr_rom':
            # Check for Marathi Roman script
            marathi_rom_indicators = ['tumhi', 'tumche', 'aahe', 'aahat', 'kara', 'dya', 'shakta']
            has_marathi_rom = any(word in interpretation.lower() for word in marathi_rom_indicators)
            print(f"тЬЕ Marathi Roman response: {has_marathi_rom}")
        elif expected_lang == 'bn':
            # Check for Bengali words
            bengali_indicators = ['ржЖржкржирж┐', 'ржЖржкржирж╛рж░', 'рж╣ржпрж╝', 'рж╣ржи', 'ржХрж░рзБржи', 'ржжрж┐ржи', 'ржкрж╛рж░рзЗржи']
            has_bengali = any(word in interpretation for word in bengali_indicators)
            print(f"тЬЕ Bengali response: {has_bengali}")
        elif expected_lang == 'te':
            # Check for Telugu words
            telugu_indicators = ['р░ор▒Ар░░р▒Б', 'р░ор▒А', 'р░Йр░Вр░жр░┐', 'р░Йр░ир▒Нр░ир░╛р░░р▒Б', 'р░Ър▒Зр░пр░Вр░бр░┐', 'р░Зр░╡р▒Нр░╡р░Вр░бр░┐', 'р░Ър▒Зр░пр░╡р░Ър▒Нр░Ър▒Б']
            has_telugu = any(word in interpretation for word in telugu_indicators)
            print(f"тЬЕ Telugu response: {has_telugu}")
        elif expected_lang == 'ta':
            # Check for Tamil words
            tamil_indicators = ['роирпАроЩрпНроХро│рпН', 'роЙроЩрпНроХро│рпН', 'роЙро│рпНро│родрпБ', 'роЙро│рпНро│рпАро░рпНроХро│рпН', 'роЪрпЖропрпНропрпБроЩрпНроХро│рпН', 'роХрпКроЯрпБроЩрпНроХро│рпН', 'роорпБроЯро┐ропрпБроорпН']
            has_tamil = any(word in interpretation for word in tamil_indicators)
            print(f"тЬЕ Tamil response: {has_tamil}")
        elif expected_lang == 'gu':
            # Check for Gujarati words
            gujarati_indicators = ['ркдркорлЗ', 'ркдркорк╛рк░рлБркВ', 'ркЫрлЗ', 'ркЫрлЛ', 'ркХрк░рлЛ', 'ркЖрккрлЛ', 'рк╢ркХрлЛ']
            has_gujarati = any(word in interpretation for word in gujarati_indicators)
            print(f"тЬЕ Gujarati response: {has_gujarati}")

def test_conversational_responses():
    """Test conversational responses in different languages"""
    print("\nЁЯТм Testing Conversational Responses...")
    
    conversational_questions = [
        ("How are you today?", "en"),
        ("рдЖрдЬ рдЖрдк рдХреИрд╕реЗ рд╣реИрдВ?", "hi"),
        ("Aaj aap kaise hain?", "hi_rom"),
        ("рдЖрдЬ рддреБрдореНрд╣реА рдХрд╕реЗ рдЖрд╣рд╛рдд?", "mr"),
        ("Aaj tumhi kase aahat?", "mr_rom")
    ]
    
    for question, expected_lang in conversational_questions:
        print(f"\n--- Conversational: {question} ---")
        
        detected_lang, confidence = language_detector(question)
        intent = classify_intent(question)
        context = create_context(language=detected_lang)
        
        result = perform_reading(question, intent, context.get_history(), detected_lang)
        
        if "error" not in result:
            interpretation = result.get("interpretation", "")
            print(f"Response: {interpretation[:150]}...")
            
            # Check if response is conversational and in the right language
            if expected_lang == 'en':
                conversational_indicators = ['good', 'well', 'thank', 'ready', 'help']
            elif expected_lang == 'hi':
                conversational_indicators = ['рдЕрдЪреНрдЫрд╛', 'рдзрдиреНрдпрд╡рд╛рдж', 'рддреИрдпрд╛рд░', 'рдорджрдж', 'рд╕реНрд╡рд╛рдЧрдд']
            elif expected_lang == 'hi_rom':
                conversational_indicators = ['achha', 'dhanyavad', 'taiyar', 'madad', 'swagat']
            elif expected_lang == 'mr':
                conversational_indicators = ['рдЪрд╛рдВрдЧрд▓реЗ', 'рдзрдиреНрдпрд╡рд╛рдж', 'рддрдпрд╛рд░', 'рдорджрдд', 'рд╕реНрд╡рд╛рдЧрдд']
            elif expected_lang == 'mr_rom':
                conversational_indicators = ['changale', 'dhanyavad', 'tayar', 'madat', 'swagat']
            
            has_conversational = any(word in interpretation.lower() for word in conversational_indicators)
            print(f"тЬЕ Conversational response: {has_conversational}")

def main():
    """Run all tests"""
    print("ЁЯзк Testing Multilingual Tarot Reader")
    print("=" * 50)
    
    try:
        test_language_detection()
        test_system_prompts()
        test_multilingual_responses()
        test_conversational_responses()
        
        print("\n" + "=" * 50)
        print("тЬЕ All tests completed successfully!")
        print("ЁЯОЙ The multilingual tarot reader is working correctly!")
        print("ЁЯМН It now responds directly in the input language without translation!")
        
    except Exception as e:
        print(f"\nтЭМ Test failed with error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 